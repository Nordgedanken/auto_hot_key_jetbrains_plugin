{
  parserClass="de.nordgedanken.auto_hotkey.parser.AHKParser"
  parserUtilClass='de.nordgedanken.auto_hotkey.parser.AHKParserUtil'

  implements='de.nordgedanken.auto_hotkey.psi.ext.AHKElement'
  extends='de.nordgedanken.auto_hotkey.psi.ext.AHKElementImpl'

  psiClassPrefix="AHK"
  psiImplClassSuffix="Impl"
  psiPackage="de.nordgedanken.auto_hotkey.psi"
  psiImplPackage="de.nordgedanken.auto_hotkey.psi.impl"
  //psiImplUtilClass="de.nordgedanken.auto_hotkey.psi.impl.AHKPsiImplUtil"

  elementTypeHolderClass="de.nordgedanken.auto_hotkey.psi.AHKTypes"
  elementTypeClass="de.nordgedanken.auto_hotkey.psi.AHKElementType"
  tokenTypeClass="de.nordgedanken.auto_hotkey.psi.AHKTokenType"


  tokens=[
    LBRACE               =  '{'
    RBRACE               =  '}'
    LBRACK               =  '['
    RBRACK               =  ']'
    LPAREN               =  '('
    RPAREN               =  ')'
    COLON                =  ':'
    SEMICOLON            =  ';'
    COMMA                =  ','
    EQUAL                =  '='
    NOT_EQ               =  '!='
    NOT                  =  '!'
    PLUS_PLUS            =  '++'
    PLUS_ASSIGN          =  '+='
    PLUS                 =  '+'
    MINUS_MINUS          =  '--'
    MINUS_ASSIGN         =  '-='
    MINUS                =  '-'
    COND_OR              =  '||'
    BIT_OR_ASSIGN        =  '|='
    BIT_CLEAR_ASSIGN     =  '&^='
    BIT_CLEAR            =  '&^'
    COND_AND             =  '&&'
    BIT_AND_ASSIGN       =  '&='
    BIT_AND              =  '&'
    BIT_OR               =  '|'
    SHIFT_LEFT_ASSIGN    =  '<<='
    SHIFT_LEFT           =  '<<'
    SEND_CHANNEL         =  '<-'
    LESS_OR_EQUAL        =  '<='
    LESS                 =  '<'
    BIT_XOR_ASSIGN       =  '^='
    BIT_XOR              =  '^'
    MUL_ASSIGN           =  '*='
    MUL                  =  '*'
    QUOTIENT             =  '/'
    SHIFT_RIGHT_ASSIGN   =  '>>='
    SHIFT_RIGHT          =  '>>'
    GREATER_OR_EQUAL     =  '>='
    GREATER              =  '>'
    IF                   = 'if'
    DOT                  = '.'


    DEFAULT   = 'default_kw'
  ]

  extends("(.+Expr)") = Expr
  extends("Pat(Ident)") = Pat

  generateTokenAccessors=true

  consumeTokenMethod("((?!.*_with_recover).*_recover)|(.*Expr)") = "consumeTokenFast"
}
ahkFile ::= Items*

private Items ::= Item_with_recover*
private Item_with_recover ::= !('}' | <<eof>>) Item {
  pin = 1
  recoverWhile = Item_recover
}

private Item_recover ::= !('}' | Item )


fake Block ::= '{' (Item)* Expr? '}' {
  pin = 1
  implements = "de.nordgedanken.auto_hotkey.psi.ext.AHKItemsOwner"
  extends = "de.nordgedanken.auto_hotkey.psi.ext.AHKStubbedElementImpl<?>"
  stubClass = "de.nordgedanken.auto_hotkey.stubs.AHKPlaceholderStub"
  elementTypeFactory = "de.nordgedanken.auto_hotkey.stubs.StubImplementationsKt.factory"
}

SimpleBlock ::= '{' BlockElement* '}' {
  pin = 1
  elementType = Block
}

Stmt ::= property {
  mixin = "de.nordgedanken.auto_hotkey.psi.ext.AHKStmtMixin"
}
AnyExpr ::= (STRING_LITERAL|NUMBERS|identifier|expression_script_block|FUNCTION_CALL) {
   elementType = Expr
   name = "expr"
 }
fake ExprStmt ::= AnyExpr { extends = Stmt }
upper ExprStmtUpper ::= () (<<isBlock>>) { pin = 1 elementType = ExprStmt }
ExprStmtOrLastExpr ::= &'}' | ExprStmtUpper {
  elementType = Expr
}
private BlockElement ::= !'}' ( variable | Item | ExprStmtOrLastExpr) {
  pin = 1
  recoverWhile = BlockElement_recover
}

private Expr_first ::= Return | '{' | '(' | true | false | if | for | continue | break  | loop | match

private BlockElement_recover ::= !('}' | Expr_first)

SimpleBlock ::= '{' BlockElement* '}' {
  pin = 1
  elementType = Block
}
    BlockExpr ::= [ &'{' ] SimpleBlock {
  implements = [ "de.nordgedanken.auto_hotkey.psi.ext.AHKLabeledExpression"]
  elementTypeFactory = "de.nordgedanken.auto_hotkey.stubs.StubImplementationsKt.factory"
}

RetExpr ::= Return Expr? {
  elementTypeFactory = "de.nordgedanken.auto_hotkey.stubs.StubImplementationsKt.factory"
}

Expr ::= RetExpr
         | BlockExpr {
                    mixin = "de.nordgedanken.auto_hotkey.psi.ext.AHKExprMixin"
                    stubClass = "de.nordgedanken.auto_hotkey.stubs.AHKPlaceholderStub"
                  }

LitExpr ::= AnyLitToken {
 elementTypeFactory = "de.nordgedanken.auto_hotkey.stubs.StubImplementationsKt.factory"
 implements = [ "com.intellij.psi.PsiLanguageInjectionHost"
                "com.intellij.psi.ContributedReferenceHost" ]
 mixin = "de.nordgedanken.auto_hotkey.psi.ext.AHKLitExprMixin"
}

private AnyLitToken ::=   STRING_LITERAL
                        | INTEGER_LITERAL {
  consumeTokenMethod = "consumeTokenFast"
}

//TODO might need to be revisited
InnerAttrsAndBlock ::= '{' '}' {
  pin = 1
  elementType = Block
}

//XXX: don't use contextual keywords in recover, because they remap tokens.
private default_ ::= <<defaultKeyword>>

private ShallowBlock ::= <<parseCodeBlockLazy>>

    PatBinding ::= identifier !ForbiddenPatBindingLast {
  implements = [ "de.nordgedanken.auto_hotkey.psi.ext.AHKMandatoryReferenceElement" ]
  mixin = "de.nordgedanken.auto_hotkey.psi.ext.AHKPatBindingImplMixin"
}

private ForbiddenPatBindingLast ::= '(' | '{' | '!' {
  consumeTokenMethod = "consumeTokenFast"
}

PatIdent ::= PatBinding

Pat ::= PatIdent {
  name = "pattern"
}

FnParameter ::= [Pat]

private FnParameter_recover ::= !(')')
private FnParameter_with_recover ::= !')' FnParameter (',' | &')') {
  pin = 2
  recoverWhile = FnParameter_recover
}

FnParameters          ::= '(' !','
                           FnParameter_with_recover*
                          ')' { pin = 1 }

Function ::= identifier
             FnParameters
             ShallowBlock?
{
  pin = 'identifier'
  name = ""
  implements = ["de.nordgedanken.auto_hotkey.psi.ext.AHKItemElement"
                "de.nordgedanken.auto_hotkey.psi.ext.AHKNamedElement"
                ]
  mixin = "de.nordgedanken.auto_hotkey.psi.ext.AHKFunctionImplMixin"
  stubClass = "de.nordgedanken.auto_hotkey.stubs.AHKFunctionStub"
  elementTypeFactory = "de.nordgedanken.auto_hotkey.stubs.StubImplementationsKt.factory"
}

Item ::= default_? (FUNCTION_CALL
         | C_COMMENT_FULL
         | HOTKEY
         | variable
         | RetExpr
         | key_list
         | Function
         | STRING_LITERAL
         | expression_script_block
         | HEX
         | INT_LITERAL) {
    name = "item"
    elementType = ToBeUpped
    hooks = [ leftBinder = "ADJACENT_LINE_COMMENTS" ]
}

key_list ::= ((identifier|INT_LITERAL|STRING_LITERAL|EXPRESSION_SCRIPT) COMMA)+ (identifier|INT_LITERAL|STRING_LITERAL|EXPRESSION_SCRIPT)?

variable ::= identifier VAR_ASIGN AnyExpr {
  extends = Stmt
  pin = "property"
}

expression_script_block ::= (EXPRESSION_SCRIPT identifier (STRING_LITERAL|INT_LITERAL|identifier) EXPRESSION_SCRIPT)

HOTKEY ::= ("#"|"!"|"^"|"+"|"&"|"<"|">"|"<^>!"|"*"|"~"|"$")? ANY_CHAR "::"

HEX ::= HEX_DEF

FUNCTION_CALL ::= identifier (STRING_LITERAL|INT_LITERAL|identifier|expression_script_block)

C_COMMENT_FULL ::= C_COMMENT (STRING_LITERAL|INT_LITERAL|(identifier DOT identifier)|identifier|expression_script_block|WHITE_SPACE)

// Use as an `elementType` for always upped rules like `Rule ::= FOO BAR ( upper1 | upper2 )`
// (without an `elementType` upper rules won't work, GK can change element type of the frame
// only if it already has some type)
// https://github.com/JetBrains/Grammar-Kit/blob/d716ade658/src/org/intellij/grammar/parser/GeneratedParserUtilBase.java#L656
fake ToBeUpped ::=
