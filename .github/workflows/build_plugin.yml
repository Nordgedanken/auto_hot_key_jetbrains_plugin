name: Build Plugin

on: [push, pull_request]

jobs:
  # Run Gradle Wrapper Validation Action to verify the wrapper's checksum
  gradleValidation:
    name: Gradle Wrapper
    runs-on: ubuntu-latest
    steps:

    # Check out current repository
    - name: Fetch Sources
      uses: actions/checkout@v2

    # Validate wrapper
    - name: Gradle Wrapper Validation
      uses: gradle/wrapper-validation-action@v1

  # Run verifyPlugin and test Gradle tasks
  test:
    name: Test
    needs: gradleValidation
    runs-on: ubuntu-latest
    steps:

    # Check out current repository
    - name: Fetch Sources
      uses: actions/checkout@v2

    # Setup Java 1.8 environment for the next steps
    - name: Setup Java
      uses: actions/setup-java@v1
      with:
        java-version: 1.8

    # Cache Gradle dependencies
    - name: Setup Cache
      uses: actions/cache@v1
      with:
        path: ~/.gradle/caches
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle') }}
        restore-keys: ${{ runner.os }}-gradle-

    # Run detekt
    - name: Run Linters
      run: ./gradlew check || exit 0

    # Run verifyPlugin Gradle task
    - name: Verify Plugin
      run: ./gradlew verifyPlugin

    # Run test Gradle task
    - name: Run Tests
      run: ./gradlew test


  # Build plugin with buildPlugin Gradle task and provide the artifact for the next workflow jobs
  # Requires test job to be passed
  build:
    name: Build
    needs: test
    runs-on: ubuntu-latest
    steps:
    # Check out current repository
    - name: Fetch Sources
      uses: actions/checkout@v2

    # Setup Java 1.8 environment for the next steps
    - name: Setup Java
      uses: actions/setup-java@v1
      with:
        java-version: 1.8

    # Cache Gradle dependencies
    - name: Setup Cache
      uses: actions/cache@v1
      with:
        path: ~/.gradle/caches
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle') }}
        restore-keys: ${{ runner.os }}-gradle-

    # Build artifact using buildPlugin Gradle task
    - name: Build Plugin
      run: ./gradlew buildPlugin

    # Upload plugin artifact to make it available in the next jobs
    - name: Upload artifact
      uses: actions/upload-artifact@v2
      with:
        name: plugin-artifact
        path: ./build/distributions

  # Verify built plugin using IntelliJ Plugin Verifier tool
  # Requires build job to be passed
  verify:
    name: Verify
    needs: build
    runs-on: ubuntu-latest
    steps:

    # Download plugin artifact provided by the previous job.
    # This will auto-extract zip contents into the current directory
    - name: Download Artifact
      uses: actions/download-artifact@v2
      with:
        name: plugin-artifact

    # Run IntelliJ Plugin Verifier action using GitHub Action
    - name: Verify Plugin
      id: verify
      uses: ChrisCarini/intellij-platform-plugin-verifier-action@latest
      with:
        plugin-location: '*.zip'
        # NOTE: For ide-versions, we just need to verify intellij community & one non-IJ IDE. Other functionality is standard.
        ide-versions: |
          ideaIC:2020.1
          ideaIC:2020.2
          ideaIC:2020.3
          pycharmPC:2020.1
